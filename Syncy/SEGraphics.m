//
//  SEGraphics.m
//  The Spectacular Sync Engine
//
//  Created by Michael Tyson on 7/01/2015.
//  Copyright (c) 2015 A Tasty Pixel. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "SEGraphics.h"


@implementation SEGraphics

#pragma mark Cache

static UIColor* _activeColor = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _activeColor = [UIColor colorWithRed: 0.933 green: 0.538 blue: 0.097 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)activeColor { return _activeColor; }

#pragma mark Drawing Methods

+ (void)drawPauseWithFrame: (CGRect)frame
{


    //// Subframes
    CGRect rectangles = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.26316 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.25263 + 0.5), floor(CGRectGetWidth(frame) * 0.74737 + 0.5) - floor(CGRectGetWidth(frame) * 0.26316 + 0.5), floor(CGRectGetHeight(frame) * 0.77895 + 0.5) - floor(CGRectGetHeight(frame) * 0.25263 + 0.5));


    //// Rectangles
    {
        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(rectangles) + floor(CGRectGetWidth(rectangles) * 0.00000 + 0.5), CGRectGetMinY(rectangles) + floor(CGRectGetHeight(rectangles) * 0.00000 + 0.5), floor(CGRectGetWidth(rectangles) * 0.43478 + 0.5) - floor(CGRectGetWidth(rectangles) * 0.00000 + 0.5), floor(CGRectGetHeight(rectangles) * 1.00000 + 0.5) - floor(CGRectGetHeight(rectangles) * 0.00000 + 0.5))];
        [SEGraphics.activeColor setStroke];
        rectangle2Path.lineWidth = 2;
        [rectangle2Path stroke];


        //// Rectangle 1 Drawing
        UIBezierPath* rectangle1Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(rectangles) + floor(CGRectGetWidth(rectangles) * 0.56522 + 0.5), CGRectGetMinY(rectangles) + floor(CGRectGetHeight(rectangles) * 0.00000 + 0.5), floor(CGRectGetWidth(rectangles) * 1.00000 + 0.5) - floor(CGRectGetWidth(rectangles) * 0.56522 + 0.5), floor(CGRectGetHeight(rectangles) * 1.00000 + 0.5) - floor(CGRectGetHeight(rectangles) * 0.00000 + 0.5))];
        [SEGraphics.activeColor setStroke];
        rectangle1Path.lineWidth = 2;
        [rectangle1Path stroke];
    }


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2)];
    [SEGraphics.activeColor setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];
}

+ (void)drawPlayWithFrame: (CGRect)frame
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, CGRectGetWidth(frame) - 2, CGRectGetHeight(frame) - 2)];
    [SEGraphics.activeColor setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];


    //// Triangle Drawing
    UIBezierPath* trianglePath = UIBezierPath.bezierPath;
    [trianglePath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.34737 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77895 * CGRectGetHeight(frame))];
    [trianglePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.34737 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24211 * CGRectGetHeight(frame))];
    [trianglePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.80000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.51053 * CGRectGetHeight(frame))];
    [trianglePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.34737 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77895 * CGRectGetHeight(frame))];
    [trianglePath closePath];
    trianglePath.miterLimit = 4;

    trianglePath.usesEvenOddFillRule = YES;

    [SEGraphics.activeColor setStroke];
    trianglePath.lineWidth = 2;
    [trianglePath stroke];
}

@end
